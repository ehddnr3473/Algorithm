//
//  선택 정렬.swift
//  Algorithm
//
//  Created by 김동욱 on 2023/01/08.
//

/*
 선택 정렬(Selection Sort)
 데이터가 무작위로 여러 개 있을 때, 그 중에서 가장 작은 데이터를 선택해
 맨 앞에 있는 데이터와 바꾸고, 그다음 작은 데이터를 선택해 앞에서 두 번째 데이터와 바꾸는 과정을 반복
 - 매번 가장 작은 것을 선택
 */
import Foundation

/*
 선택 정렬은 N - 1번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 함.
 또한 매번 가장 작은 수를 찾기 위해서 비교 연산이 필요. 구현 방식에 따라서 오차는 있을 수 있지만
 연산 횟수는 N + (N-1) + (N-2) + ... + 2로 볼 수 있음.
 따라서 근사치로 N * (N+1) / 2번의 연산을 수행. 이는 (N² + N) / 2로 표현할 수 있음.
 그리고 빅오 표기법으로 O(N²)
 
 반복문이 얼마나 중첩되었는지를 기준으로 간단히 시간 복잡도를 판단할 수 있음.
 선택 정렬의 시간 복잡도는 O(N²). 직관적으로 이해하자면, 코드 상으로 간단한 형태의 2중 반복문이 사용되었기 때문이라고 이해할 수 있음.
 만약 정렬해야 할 데이터의 개수가 100배 늘어나면, 이론적으로 수행 시간은 10,000배 늘어남.
 */
func selectionSorting() {
    var array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]
    
    // i를 하나씩 증가시켜가며 범위를 좁힘.
    for i in array.indices {
        var minIndex = i
        // i+1 ~ 배열의 끝까지 탐색해서 가장 작은 값의 인덱스 검출
        for j in i+1..<array.count {
            if array[minIndex] > array[j] {
                minIndex = j
            }
        }
        // 현재 기준 인덱스(i)의 값과 가장 작은 값을 swap
        array.swapAt(i, minIndex)
    }
    
    print(array)
} // 오름차순 정렬

//selectionSorting()
